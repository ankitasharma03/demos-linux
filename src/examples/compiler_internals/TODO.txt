- add another example that shows why volatile is bad (base it on the kernel
	article about volatiles being harmful).
- do the example in the reference:
	http://ridiculousfish.com/blog/archives/2007/02/17/barrier/
- investigate further the compiler barrier. The volatile part vs the memory
	part. show when each is neccessary.
- is there a user space version of cpu_relax of kernel space ?!?
- do more examples like the unused result one to show how to use the compiler
	to guard against problems (checking of constant, more).
- explain how to turn off compiler optimization.
	either for a whole code section using:
		#pragma GCC push_options
		#pragma GCC optimize ("O0")
		your code
		#pragma GCC pop_options
	or for a whole function (using __attribute__((optimize("O0"))))
	as per: http://stackoverflow.com/questions/2219829/how-to-prevent-gcc-optimizing-some-statements-in-c
- demo the use of __builtin_frame_address and __builtin_return_address
